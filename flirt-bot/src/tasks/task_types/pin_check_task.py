#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Mesaj Sabitleme GÃ¶revi
Bir kullanÄ±cÄ±nÄ±n bir grupta mesaj sabitlemesini doÄŸrulayan gÃ¶rev sÄ±nÄ±fÄ±.
"""

import logging
from typing import Dict, Any, Optional
from telethon import events
from telethon.tl.types import ChannelParticipantAdmin, ChannelParticipantCreator
from telethon.tl.functions.channels import GetParticipantRequest

from ..base_task import BaseTask

logger = logging.getLogger(__name__)

class PinCheckTask(BaseTask):
    """Bir kullanÄ±cÄ±nÄ±n mesaj sabitlemesini doÄŸrulayan gÃ¶rev sÄ±nÄ±fÄ±."""
    
    def __init__(
        self,
        user_id: str,
        task_id: str,
        expiry_time: int,
        verification_engine,
        bot,
        **kwargs
    ):
        """
        PinCheckTask yapÄ±cÄ±sÄ±
        
        Args:
            user_id: KullanÄ±cÄ± ID'si
            task_id: GÃ¶rev ID'si
            expiry_time: GÃ¶revin geÃ§erlilik sÃ¼resi (Unix timestamp)
            verification_engine: GÃ¶rev doÄŸrulama motoru referansÄ±
            bot: Bot istemci referansÄ±
            target_group (str, optional): Sabitleme yapÄ±lacak hedef grup/kanal
            require_admin (bool, optional): Sabitleme iÃ§in yÃ¶netici yetkisi gerekli mi
        """
        super().__init__(
            user_id=user_id,
            task_id=task_id,
            expiry_time=expiry_time,
            verification_engine=verification_engine,
            bot=bot,
            **kwargs
        )
        
        # Sabitleme gÃ¶revi Ã¶zellikleri
        self.target_group = kwargs.get("target_group", None)  # Hedef grup/kanal
        self.require_admin = kwargs.get("require_admin", True)  # YÃ¶netici yetkisi gerekli mi
        
        # Bot kullanÄ±cÄ± adÄ±nÄ± al
        self.bot_username = getattr(verification_engine, 'bot_username', "OnlyVipsBot")
        
        # Olay dinleyici referansÄ±
        self._handler = None
        
    async def start_listening(self):
        """Sabitleme olaylarÄ±nÄ± dinlemeye baÅŸla"""
        
        logger.info(f"Mesaj sabitleme gÃ¶revi dinleyicisi baÅŸlatÄ±lÄ±yor: {self.user_id}_{self.task_id}")
        
        @self.bot.on(events.ChatAction())
        async def pin_handler(event):
            if not self.is_active or self.is_completed:
                return
                
            try:
                # Sabitleme olayÄ± mÄ± kontrol et
                if not (event.action_message and event.action_message.pinned):
                    return
                
                # Grup veya kanal mesajÄ± mÄ± kontrol et
                if not (event.is_group or event.is_channel):
                    return
                
                # Sabitleyen kullanÄ±cÄ±yÄ± al
                chat = await event.get_chat()
                sender = await event.get_sender()
                sender_id = str(sender.id)
                
                # Bu gÃ¶revi yapan kullanÄ±cÄ± mÄ± kontrol et
                if sender_id != self.user_id:
                    return
                
                # Hedef grup belirtilmiÅŸse, sadece o grubu kontrol et
                if self.target_group:
                    chat_id = str(chat.id)
                    chat_username = getattr(chat, 'username', '')
                    
                    # Hedef grup ID veya kullanÄ±cÄ± adÄ± ile eÅŸleÅŸmiyor
                    if chat_id != self.target_group and chat_username != self.target_group:
                        if not chat_username or (self.target_group not in ["@" + chat_username, chat_username]):
                            return
                
                # YÃ¶netici kontrolÃ¼ gerekiyorsa yap
                if self.require_admin:
                    is_admin = await self._check_admin_status(chat.id, int(self.user_id))
                    if not is_admin:
                        logger.warning(f"KullanÄ±cÄ± {self.user_id} yÃ¶netici deÄŸil, sabitleme gÃ¶revi doÄŸrulanamaz")
                        return
                
                # GÃ¶revi tamamla
                await self._complete_task()
                
            except Exception as e:
                logger.error(f"Mesaj sabitleme kontrolÃ¼nde hata: {e}")
        
        self._handler = pin_handler
    
    async def _check_admin_status(self, chat_id, user_id) -> bool:
        """KullanÄ±cÄ±nÄ±n yÃ¶netici olup olmadÄ±ÄŸÄ±nÄ± kontrol et"""
        try:
            participant = await self.bot(GetParticipantRequest(
                channel=chat_id,
                participant=user_id
            ))
            
            return isinstance(participant.participant, (ChannelParticipantAdmin, ChannelParticipantCreator))
        except Exception as e:
            logger.error(f"YÃ¶netici durumu kontrolÃ¼nde hata: {e}")
            return False
    
    async def _complete_task(self):
        """GÃ¶revi tamamla"""
        if not self.is_completed:
            self.is_completed = True
            
            # DoÄŸrulama motoruna bildir
            await self.verification_engine.verify_task(self.user_id, self.task_id, True)
            
            # KullanÄ±cÄ±ya tebrik mesajÄ± gÃ¶nder
            try:
                from telethon import Button
                miniapp_url = f"https://t.me/{self.bot_username}/app?startapp={self.user_id}"
                
                await self.bot.send_message(
                    int(self.user_id),
                    f"ğŸ“Œ Mesaj sabitleme gÃ¶reviniz baÅŸarÄ±yla tamamlandÄ± ve Ã¶dÃ¼lÃ¼nÃ¼z verildi! Daha fazla gÃ¶rev iÃ§in MiniApp'i ziyaret edebilirsiniz.",
                    buttons=[Button.url("ğŸš€ OnlyVips MiniApp", miniapp_url)]
                )
            except Exception as e:
                logger.error(f"KullanÄ±cÄ±ya bildirim gÃ¶nderilemedi: {e}")
        
    async def stop_listening(self):
        """Sabitleme olaylarÄ±nÄ± dinlemeyi durdur"""
        if self._handler:
            logger.info(f"Mesaj sabitleme gÃ¶revi dinleyicisi durduruluyor: {self.user_id}_{self.task_id}")
            self.bot.remove_event_handler(self._handler)
            self._handler = None
    
    async def verify_manually(self, admin_id: str) -> bool:
        """
        GÃ¶revi manuel olarak doÄŸrula
        
        Args:
            admin_id: YÃ¶netici ID'si
            
        Returns:
            bool: DoÄŸrulama baÅŸarÄ±lÄ± ise True
        """
        logger.info(f"Mesaj sabitleme gÃ¶revi manuel doÄŸrulandÄ±: {self.user_id}_{self.task_id} (admin: {admin_id})")
        
        self.is_completed = True
        
        # Bot aracÄ±lÄ±ÄŸÄ±yla kullanÄ±cÄ±ya bildir
        try:
            await self.bot.send_message(
                int(self.user_id),
                f"âœ… Tebrikler! Mesaj sabitleme gÃ¶reviniz bir yÃ¶netici tarafÄ±ndan onaylandÄ±."
            )
        except Exception as e:
            logger.error(f"KullanÄ±cÄ±ya bildirim gÃ¶nderilemedi: {e}")
        
        return True 