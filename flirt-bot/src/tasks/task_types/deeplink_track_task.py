#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Link Takip GÃ¶revi
Bir kullanÄ±cÄ±nÄ±n bot baÄŸlantÄ±sÄ± veya proje linki paylaÅŸmasÄ±nÄ± doÄŸrulayan gÃ¶rev sÄ±nÄ±fÄ±.
"""

import logging
import re
from typing import Dict, Any, Optional, List
from telethon import events
from telethon.tl.types import MessageEntityUrl, MessageEntityTextUrl

from ..base_task import BaseTask

logger = logging.getLogger(__name__)

class DeeplinkTrackTask(BaseTask):
    """Link paylaÅŸÄ±mÄ± gÃ¶revini doÄŸrulayan sÄ±nÄ±f."""
    
    def __init__(
        self,
        user_id: str,
        task_id: str,
        expiry_time: int,
        verification_engine,
        bot,
        **kwargs
    ):
        """
        DeeplinkTrackTask yapÄ±cÄ±sÄ±
        
        Args:
            user_id: KullanÄ±cÄ± ID'si
            task_id: GÃ¶rev ID'si
            expiry_time: GÃ¶revin geÃ§erlilik sÃ¼resi (Unix timestamp)
            verification_engine: GÃ¶rev doÄŸrulama motoru referansÄ±
            bot: Bot istemci referansÄ±
            domains (List[str], optional): Ä°zlenen alan adlarÄ±
            target_group (str, optional): PaylaÅŸÄ±m yapÄ±lacak hedef grup/kanal
            require_custom_text (bool, optional): Ã–zel metin gerekli mi
            min_shares (int, optional): Minimum paylaÅŸÄ±m sayÄ±sÄ±
        """
        super().__init__(
            user_id=user_id,
            task_id=task_id,
            expiry_time=expiry_time,
            verification_engine=verification_engine,
            bot=bot,
            **kwargs
        )
        
        # Link takip gÃ¶revi Ã¶zellikleri
        self.domains = kwargs.get("domains", ["t.me", "onlyvips.com"])  # Ä°zlenen alan adlarÄ±
        self.target_group = kwargs.get("target_group", None)  # Hedef grup/kanal
        self.require_custom_text = kwargs.get("require_custom_text", False)  # Ã–zel metin gerekli mi
        self.min_shares = kwargs.get("min_shares", 1)  # Minimum paylaÅŸÄ±m sayÄ±sÄ±
        
        # Bot kullanÄ±cÄ± adÄ±nÄ± al
        self.bot_username = getattr(verification_engine, 'bot_username', "OnlyVipsBot")
        
        # Ä°zleme durumu
        self.share_count = 0
        
        # Olay dinleyici referansÄ±
        self._handler = None
        
    async def start_listening(self):
        """Link paylaÅŸÄ±m olaylarÄ±nÄ± dinlemeye baÅŸla"""
        
        logger.info(f"Link takip gÃ¶revi dinleyicisi baÅŸlatÄ±lÄ±yor: {self.user_id}_{self.task_id}")
        
        # URL iÃ§eren mesajlarÄ± dinle
        @self.bot.on(events.NewMessage(from_users=int(self.user_id), pattern=r"https?://[^\s]+"))
        async def link_handler(event):
            if not self.is_active or self.is_completed:
                return
                
            try:
                # MesajÄ±n iÃ§eriÄŸini ve linklerini kontrol et
                message = event.message
                
                # Mesaj varlÄ±klarÄ±nÄ± (entities) kontrol et
                if not message.entities:
                    return
                
                # Grup kontrolÃ¼ yap
                if self.target_group:
                    chat = await event.get_chat()
                    chat_id = str(chat.id)
                    chat_username = getattr(chat, 'username', '')
                    
                    # Hedef grup ID veya kullanÄ±cÄ± adÄ± ile eÅŸleÅŸmiyor
                    if chat_id != self.target_group and chat_username != self.target_group:
                        if not chat_username or (self.target_group not in ["@" + chat_username, chat_username]):
                            return
                
                # URL'leri kontrol et
                valid_domains_found = False
                for entity in message.entities:
                    if isinstance(entity, (MessageEntityUrl, MessageEntityTextUrl)):
                        # Entity'den URL'yi Ã§Ä±kar
                        if isinstance(entity, MessageEntityUrl):
                            url = message.text[entity.offset:entity.offset + entity.length]
                        else:  # MessageEntityTextUrl
                            url = entity.url
                        
                        # URL beklenen alan adlarÄ±ndan birini iÃ§eriyor mu?
                        for domain in self.domains:
                            if domain in url:
                                # Bot kullanÄ±cÄ± adÄ±nÄ± kontrol et
                                if domain == "t.me" and self.bot_username:
                                    # Spesifik olarak bot username'Ä± var mÄ±?
                                    if f"t.me/{self.bot_username}" in url:
                                        valid_domains_found = True
                                        break
                                else:
                                    valid_domains_found = True
                                    break
                        
                        if valid_domains_found:
                            break
                
                # GeÃ§erli bir domain bulunduysa
                if valid_domains_found:
                    # Ã–zel metin gerekli mi?
                    if self.require_custom_text:
                        # Mesajda sadece link olmasÄ±n, en az bir kaÃ§ kelime daha olsun
                        text_without_urls = message.text
                        for entity in message.entities:
                            if isinstance(entity, (MessageEntityUrl, MessageEntityTextUrl)):
                                start = entity.offset
                                end = entity.offset + entity.length
                                text_without_urls = text_without_urls[:start] + text_without_urls[end:]
                        
                        # Kalan metini temizle ve boÅŸ mu kontrol et
                        text_without_urls = text_without_urls.strip()
                        if len(text_without_urls.split()) < 2:  # En az 2 kelime olsun
                            logger.info(f"Link paylaÅŸÄ±ldÄ± ama yeterli metin yok: {self.user_id}")
                            return
                    
                    # PaylaÅŸÄ±m sayÄ±sÄ±nÄ± artÄ±r
                    self.share_count += 1
                    logger.info(f"Link paylaÅŸÄ±mÄ± tespit edildi: {self.user_id}, sayÄ±: {self.share_count}/{self.min_shares}")
                    
                    # Minimum paylaÅŸÄ±m sayÄ±sÄ±na ulaÅŸÄ±ldÄ±ysa gÃ¶revi tamamla
                    if self.share_count >= self.min_shares:
                        await self._complete_task(event)
                
            except Exception as e:
                logger.error(f"Link kontrolÃ¼nde hata: {e}")
        
        self._handler = link_handler
        
    async def _complete_task(self, event=None):
        """GÃ¶revi tamamla"""
        if not self.is_completed:
            self.is_completed = True
            
            # DoÄŸrulama motoruna bildir
            await self.verification_engine.verify_task(self.user_id, self.task_id, True)
            
            # KullanÄ±cÄ±ya tebrik mesajÄ± gÃ¶nder
            try:
                # EÄŸer event varsa ve grup iÃ§indeyse, yanÄ±t ver
                if event:
                    try:
                        await event.reply("âœ… Link paylaÅŸÄ±m gÃ¶reviniz baÅŸarÄ±yla tamamlandÄ± ve Ã¶dÃ¼lÃ¼nÃ¼z verildi!")
                    except Exception as e:
                        logger.error(f"Grup iÃ§inde bildirim gÃ¶nderilemedi: {e}")
                
                # Her durumda Ã¶zel mesaj gÃ¶nder
                from telethon import Button
                miniapp_url = f"https://t.me/{self.bot_username}/app?startapp={self.user_id}"
                
                await self.bot.send_message(
                    int(self.user_id),
                    f"ğŸ”— Link paylaÅŸÄ±m gÃ¶reviniz baÅŸarÄ±yla tamamlandÄ± ve Ã¶dÃ¼lÃ¼nÃ¼z verildi! Daha fazla gÃ¶rev iÃ§in MiniApp'i ziyaret edebilirsiniz.",
                    buttons=[Button.url("ğŸš€ OnlyVips MiniApp", miniapp_url)]
                )
            except Exception as e:
                logger.error(f"KullanÄ±cÄ±ya bildirim gÃ¶nderilemedi: {e}")
        
    async def stop_listening(self):
        """Link paylaÅŸÄ±m olaylarÄ±nÄ± dinlemeyi durdur"""
        if self._handler:
            logger.info(f"Link takip gÃ¶revi dinleyicisi durduruluyor: {self.user_id}_{self.task_id}")
            self.bot.remove_event_handler(self._handler)
            self._handler = None
    
    async def verify_manually(self, admin_id: str) -> bool:
        """
        GÃ¶revi manuel olarak doÄŸrula
        
        Args:
            admin_id: YÃ¶netici ID'si
            
        Returns:
            bool: DoÄŸrulama baÅŸarÄ±lÄ± ise True
        """
        logger.info(f"Link paylaÅŸÄ±m gÃ¶revi manuel doÄŸrulandÄ±: {self.user_id}_{self.task_id} (admin: {admin_id})")
        
        self.is_completed = True
        
        # Bot aracÄ±lÄ±ÄŸÄ±yla kullanÄ±cÄ±ya bildir
        try:
            await self.bot.send_message(
                int(self.user_id),
                f"âœ… Tebrikler! Link paylaÅŸÄ±m gÃ¶reviniz bir yÃ¶netici tarafÄ±ndan onaylandÄ±."
            )
        except Exception as e:
            logger.error(f"KullanÄ±cÄ±ya bildirim gÃ¶nderilemedi: {e}")
        
        return True 