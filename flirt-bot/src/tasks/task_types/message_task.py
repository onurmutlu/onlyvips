#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Mesaj GÃ¶nderme GÃ¶revi
Bir kullanÄ±cÄ±nÄ±n bot veya belirli bir kullanÄ±cÄ±ya mesaj gÃ¶ndermesini doÄŸrulayan gÃ¶rev sÄ±nÄ±fÄ±.
"""

import logging
import re
from typing import Dict, Any, Optional, List, Union
from telethon import events

from ..base_task import BaseTask

logger = logging.getLogger(__name__)

class MessageTask(BaseTask):
    """Belirli bir mesaj gÃ¶nderme gÃ¶revini doÄŸrulayan sÄ±nÄ±f."""
    
    def __init__(
        self,
        user_id: str,
        task_id: str,
        expiry_time: int,
        verification_engine,
        bot,
        **kwargs
    ):
        """
        MessageTask yapÄ±cÄ±sÄ±
        
        Args:
            user_id: KullanÄ±cÄ± ID'si
            task_id: GÃ¶rev ID'si
            expiry_time: GÃ¶revin geÃ§erlilik sÃ¼resi (Unix timestamp)
            verification_engine: GÃ¶rev doÄŸrulama motoru referansÄ±
            bot: Bot istemci referansÄ±
            target_id (str, optional): Hedef kullanÄ±cÄ±/bot ID'si (belirtilmezse bota mesaj)
            required_content (List[str], optional): MesajÄ±n iÃ§ermesi gereken kelime/ifade listesi
            min_length (int, optional): Minimum mesaj uzunluÄŸu
            is_private (bool, optional): Sadece Ã¶zel mesaj mÄ± kabul edilsin
        """
        super().__init__(
            user_id=user_id,
            task_id=task_id,
            expiry_time=expiry_time,
            verification_engine=verification_engine,
            bot=bot,
            **kwargs
        )
        
        # Mesaj gÃ¶revi Ã¶zellikleri
        self.target_id = kwargs.get("target_id", None)  # Hedef ID, None ise bota mesaj
        self.required_content = kwargs.get("required_content", [])  # Gerekli iÃ§erik
        self.min_length = kwargs.get("min_length", 0)  # Minimum uzunluk
        self.is_private = kwargs.get("is_private", True)  # Sadece Ã¶zel mesaj
        
        # Bot kullanÄ±cÄ± adÄ±nÄ± al
        self.bot_username = getattr(verification_engine, 'bot_username', "OnlyVipsBot")
        
        # Olay dinleyici referansÄ±
        self._handler = None
        
    async def start_listening(self):
        """Mesaj olaylarÄ±nÄ± dinlemeye baÅŸla"""
        
        logger.info(f"Mesaj gÃ¶nderme gÃ¶revi dinleyicisi baÅŸlatÄ±lÄ±yor: {self.user_id}_{self.task_id}")
        
        # Hedef ID belirtilmemiÅŸse, bot ID'sini kullan
        target_id = self.target_id
        if not target_id:
            # Bot ID'sini al
            try:
                me = await self.bot.get_me()
                target_id = str(me.id)
                logger.info(f"Mesaj hedefi olarak bot ID kullanÄ±lÄ±yor: {target_id}")
            except Exception as e:
                logger.error(f"Bot ID alÄ±namadÄ±: {e}")
                target_id = None
        
        # Dinleme filtresi oluÅŸtur
        if self.is_private:
            # Sadece Ã¶zel mesajlarÄ± dinle
            filter_private = lambda e: e.is_private
        else:
            # TÃ¼m mesajlarÄ± dinle
            filter_private = lambda e: True
        
        @self.bot.on(events.NewMessage(incoming=True, func=filter_private))
        async def message_handler(event):
            if not self.is_active or self.is_completed:
                return
                
            try:
                # GÃ¶nderen kullanÄ±cÄ±yÄ± kontrol et
                sender = await event.get_sender()
                sender_id = str(sender.id)
                
                if sender_id != self.user_id:
                    return
                
                # Hedef kontrolÃ¼ yap
                if target_id:
                    # MesajÄ±n hedefinin doÄŸru olduÄŸundan emin ol
                    chat = await event.get_chat()
                    chat_id = str(chat.id)
                    
                    # Hedef ID ile eÅŸleÅŸiyor mu?
                    if chat_id != target_id:
                        return
                
                # Mesaj iÃ§eriÄŸini kontrol et
                message_text = event.message.text
                
                # Minimum uzunluk kontrolÃ¼
                if self.min_length > 0 and len(message_text) < self.min_length:
                    logger.info(f"Mesaj Ã§ok kÄ±sa: {len(message_text)} / {self.min_length}")
                    return
                
                # Gerekli iÃ§erik kontrolÃ¼
                if self.required_content:
                    all_content_found = True
                    for required in self.required_content:
                        if required.lower() not in message_text.lower():
                            all_content_found = False
                            break
                    
                    if not all_content_found:
                        logger.info(f"Mesaj gerekli iÃ§eriÄŸi barÄ±ndÄ±rmÄ±yor: {self.required_content}")
                        return
                
                # TÃ¼m kriterler saÄŸlandÄ±, gÃ¶revi tamamla
                logger.info(f"Mesaj gÃ¶nderme gÃ¶revi tamamlandÄ±: {self.user_id}")
                await self._complete_task(event)
                
            except Exception as e:
                logger.error(f"Mesaj kontrolÃ¼nde hata: {e}")
        
        self._handler = message_handler
        
    async def _complete_task(self, event=None):
        """GÃ¶revi tamamla"""
        if not self.is_completed:
            self.is_completed = True
            
            # DoÄŸrulama motoruna bildir
            await self.verification_engine.verify_task(self.user_id, self.task_id, True)
            
            # KullanÄ±cÄ±ya tebrik mesajÄ± gÃ¶nder
            try:
                # EÄŸer event varsa, yanÄ±t ver
                if event:
                    try:
                        await event.reply("âœ… Mesaj gÃ¶nderme gÃ¶reviniz baÅŸarÄ±yla tamamlandÄ± ve Ã¶dÃ¼lÃ¼nÃ¼z verildi!")
                    except Exception as e:
                        logger.error(f"YanÄ±t gÃ¶nderilemedi: {e}")
                
                # Her durumda Ã¶zel mesaj gÃ¶nder
                from telethon import Button
                miniapp_url = f"https://t.me/{self.bot_username}/app?startapp={self.user_id}"
                
                await self.bot.send_message(
                    int(self.user_id),
                    f"ğŸ’¬ Mesaj gÃ¶nderme gÃ¶reviniz baÅŸarÄ±yla tamamlandÄ± ve Ã¶dÃ¼lÃ¼nÃ¼z verildi! Daha fazla gÃ¶rev iÃ§in MiniApp'i ziyaret edebilirsiniz.",
                    buttons=[Button.url("ğŸš€ OnlyVips MiniApp", miniapp_url)]
                )
            except Exception as e:
                logger.error(f"KullanÄ±cÄ±ya bildirim gÃ¶nderilemedi: {e}")
    
    async def stop_listening(self):
        """Mesaj olaylarÄ±nÄ± dinlemeyi durdur"""
        if self._handler:
            logger.info(f"Mesaj gÃ¶nderme gÃ¶revi dinleyicisi durduruluyor: {self.user_id}_{self.task_id}")
            self.bot.remove_event_handler(self._handler)
            self._handler = None
    
    async def verify_manually(self, admin_id: str) -> bool:
        """
        GÃ¶revi manuel olarak doÄŸrula
        
        Args:
            admin_id: YÃ¶netici ID'si
            
        Returns:
            bool: DoÄŸrulama baÅŸarÄ±lÄ± ise True
        """
        logger.info(f"Mesaj gÃ¶nderme gÃ¶revi manuel doÄŸrulandÄ±: {self.user_id}_{self.task_id} (admin: {admin_id})")
        
        self.is_completed = True
        
        # Bot aracÄ±lÄ±ÄŸÄ±yla kullanÄ±cÄ±ya bildir
        try:
            await self.bot.send_message(
                int(self.user_id),
                f"âœ… Tebrikler! Mesaj gÃ¶nderme gÃ¶reviniz bir yÃ¶netici tarafÄ±ndan onaylandÄ±."
            )
        except Exception as e:
            logger.error(f"KullanÄ±cÄ±ya bildirim gÃ¶nderilemedi: {e}")
        
        return True 