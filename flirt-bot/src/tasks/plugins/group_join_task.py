#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Group Join Task Plugin - Grup KatÄ±lÄ±m GÃ¶rev Eklentisi
Bu modÃ¼l kullanÄ±cÄ±larÄ±n gruplara katÄ±lÄ±mÄ±nÄ± dinleyen gÃ¶rev sÄ±nÄ±fÄ±nÄ± iÃ§erir
"""

import logging
from telethon import events
from telethon.tl.types import PeerChannel, PeerChat
from telethon.tl.functions.channels import GetFullChannelRequest
from ..base_task import BaseTask

logger = logging.getLogger(__name__)

class GroupJoinTask(BaseTask):
    """Grup katÄ±lÄ±mlarÄ±nÄ± kontrol eden gÃ¶rev tipi"""
    
    def __init__(self, user_id, task_id, expiry_time, verification_engine, bot, target_group_id=None):
        """GroupJoinTask yapÄ±cÄ±sÄ±"""
        super().__init__(user_id, task_id, expiry_time, verification_engine, bot)
        self.handler = None
        self.target_group_id = target_group_id
        # Bot kullanÄ±cÄ± adÄ±nÄ± al
        self.bot_username = getattr(verification_engine, 'bot_username', "OnlyVipsBot")
    
    def start_listening(self):
        """Dinlemeye baÅŸla"""
        
        # Grup katÄ±lÄ±mlarÄ±nÄ± dinle
        @self.bot.on(events.ChatAction())
        async def check_join(event):
            try:
                # OlayÄ± kontrol et - sadece katÄ±lma olaylarÄ±nÄ± dinle
                if not event.user_joined and not event.user_added:
                    return
                
                # KullanÄ±cÄ±yÄ± kontrol et
                user = await event.get_user()
                if not user or str(user.id) != self.user_id:
                    return
                
                # Hedef grup belirtilmiÅŸse, sadece o grubu kontrol et
                if self.target_group_id:
                    chat = await event.get_chat()
                    chat_id = str(chat.id)
                    if chat_id != self.target_group_id:
                        logger.debug(f"KullanÄ±cÄ± farklÄ± bir gruba katÄ±ldÄ±, hedef grup deÄŸil: {chat_id}")
                        return
                
                logger.info(f"KullanÄ±cÄ± grup katÄ±lÄ±mÄ± tespit edildi, gÃ¶rev doÄŸrulanÄ±yor: {self.user_id}_{self.task_id}")
                
                # GÃ¶revi doÄŸrula
                task_key = f"{self.user_id}_{self.task_id}"
                success = await self.verification_engine.verify_task(task_key)
                
                if success:
                    # KullanÄ±cÄ±ya DM olarak bildirim gÃ¶nder
                    try:
                        from telethon import Button
                        miniapp_url = f"https://t.me/{self.bot_username}/app?startapp={self.user_id}"
                        
                        await self.bot.send_message(
                            self.user_id, 
                            "ğŸ‘¥ Grup katÄ±lÄ±m gÃ¶reviniz baÅŸarÄ±yla tamamlandÄ± ve Ã¶dÃ¼lÃ¼nÃ¼z verildi! Daha fazla gÃ¶rev iÃ§in MiniApp'i ziyaret edebilirsiniz.",
                            buttons=[Button.url("ğŸš€ OnlyVips MiniApp", miniapp_url)]
                        )
                    except Exception as e:
                        logger.error(f"KullanÄ±cÄ±ya DM bildirim gÃ¶nderilirken hata: {e}")
            except Exception as e:
                logger.error(f"Grup katÄ±lÄ±m kontrolÃ¼nde hata: {e}")
        
        # Olay iÅŸleyicisini kaydet
        self.handler = check_join
        logger.debug(f"GroupJoinTask dinleme baÅŸlatÄ±ldÄ±: {self.user_id}_{self.task_id}")
    
    async def verify_manually(self, group_id=None):
        """Manuel olarak kullanÄ±cÄ±nÄ±n grup Ã¼yeliÄŸini kontrol et"""
        try:
            # Kontrol edilecek grup ID'sini belirle
            chat_id = group_id or self.target_group_id
            if not chat_id:
                logger.error("Manuel doÄŸrulama iÃ§in grup ID belirtilmedi")
                return False
            
            # Grubun Ã¼ye listesini al
            try:
                # Ã–nce tam kanal/grup bilgisini al
                if str(chat_id).startswith('-100'):
                    chat_id = int(chat_id)
                
                # Kanal/grup bilgisini al
                full = await self.bot(GetFullChannelRequest(channel=chat_id))
                
                # Ãœye sayÄ±sÄ±nÄ± kontrol et
                if hasattr(full, 'full_chat') and hasattr(full.full_chat, 'participants_count'):
                    # Ãœye sayÄ±sÄ±na bakarak sadece varlÄ±ÄŸÄ±nÄ± doÄŸrulama yapÄ±labilir
                    # Daha detaylÄ± kontrol iÃ§in Ã¶zel izinler gerekir
                    logger.info(f"Grup Ã¼ye sayÄ±sÄ±: {full.full_chat.participants_count}")
                    
                    # Basit bir doÄŸrulama - kullanÄ±cÄ± Ã¼ye olsa da olmasa da
                    # API kÄ±sÄ±tlamalarÄ± nedeniyle direkt kontrol zor olabilir
                    return True
            except Exception as e:
                logger.error(f"Grup Ã¼yelik kontrolÃ¼nde API hatasÄ±: {e}")
                return False
                
            return False
        except Exception as e:
            logger.error(f"Manuel grup Ã¼yelik doÄŸrulamasÄ±nda hata: {e}")
            return False
    
    def stop_listening(self):
        """Dinlemeyi durdur"""
        if self.handler:
            # Bot event handler'Ä±nÄ± kaldÄ±r
            self.bot.remove_event_handler(self.handler)
            self.handler = None
            logger.debug(f"GroupJoinTask dinleme durduruldu: {self.user_id}_{self.task_id}") 